REBOL [ ]

*messages*: copy [ ]

prepare-messages: does [ 
    if select session/content 'messages [ 
        append *messages* copy session/content/messages
        session/content/messages: none
    ]
]

add-message: func [ message type ] [
    append *messages* reduce [ message type ]
]

show-messages: func [ /local R ] [
    R: copy "" prepare-messages 
    foreach [ m t ] *messages* [ append R rejoin [ "<li class='" t "'>" m "</li>"] ]
    either empty? *messages* [ "" ][ rejoin [ "<ul id='messages'>" R "</ul>" ] ]
]

lis: func [ items inner outer ] [
    res: copy ""
    inner: any [ inner "li" ]
    foreach it items [ 
        append res wrap it inner
    ]
    wrap res any [ outer "ul" ]
]

wrap: func [ value name ] [
    rejoin [ "<" name ">" value "</" name ">" ] 
]

preserve-messages: does [ 
    session/content/messages: *messages*   
]

preserve-and-redirect: func [ url ] [
	preserve-messages
	preserve-form-data
	response/redirect url
]

fix-decimal: func [ s ] [
	dot1: find s "." comm1: find s "," 
	if all [ dot1 comm1 ] [
		s: replace/all s either lesser? index? dot1  index? comm1 ["."][","] ""
	]
	if comm1 [
		s: replace/all s "," "."
	]
	s
]
to-decimal fix-decimal "1,121.10"

;
;  create partner data
;  delete partner 12
;  update partner 12 data
;  read partner 12
;  ;TODO SOMETHING LIKE IT LATER 
;  read partner-s
;  update partner-s where "name = janko" with data
;  read partner-s where "..." order by "..." 
;  delete partner-s where "
;  read partner join city join country 13

do-crud-dsl: func [ dsl /make-sql /local d set-id set-data data id ] [
	d: []
	set-id: [ set idw word! ( id: get idw ) | set id integer! | set idp path! ( id: select get (first idp) (second idp) ) ]
	set-data: [ set dataw word! ( data: get dataw ) | set data block! ]
	parse dsl [ 
		'insert-into set table word! set-data ( d: [ "INSERT INTO " table " (" (list-keys data) ") VALUES (" (list-values data) ") ; " ] ) 
		| 'delete set table word! set-id ( d: [ "DELETE FROM " table " WHERE id = " id " ; " ] ) 
		| 'update set table word! set-id set-data ( d: [ "UPDATE " table " SET " list-key=value data " WHERE id = " id " ; " ] )
		| 'select set table word! set-id ( d: [ "SELECT * FROM " table " WHERE id = " id " ; " ] )
	]
	either make-sql [ rejoin d ][ SQL rejoin d ]
]

list-keys: func [ data ] [ _list-* data 'key ]
list-values: func [ data ] [ _list-* data 'val ]

_list-*: func [ data which ] [ 
	accumulate [ key val ] acc "" data [ 
		rejoin [ acc 
			(either empty? acc [ "" ] [ ", " ]) 
			(either equal? which 'key [ key ][ enquote/sql val ]) ] ]
]

list-key=value: func [ data ] [ 
	accumulate [ key val ] acc "" data [ rejoin [ acc (either empty? acc [ "" ] [ ", " ]) key "=" enquote/sql val ] ]
]

process-redir-request: func [ 'datan validation success to-url /sqlite /local v ] [
	v: validator/go request/content validation
	either v/1 [
		set datan v/2  do success  preserve-and-redirect rejoin to-url
	] [
		preserve-and-redirect rejoin to-url
	]
]

process-request: func [ 'datan [word!] force-data [block! none!] validation [block!] success [block!] 
	/local v 
] [
	v: validator/go (any [ force-data request/content ]) validation
	either v/1 [
		set :datan v/2  
		do success
	] [
        compose [ 'err (v/2) ] 
	]
]

serialize-response: func [ r format ] [
	print "!!!!!"
	probe r
    either not equal? first r 'err [
        switch/default format [ 
			json-wrap [ rejoin [ "['ok'," dbdata-to-json r "]" ] ] 
			json [ dbdata-to-json r ] 
			map  [ dbdata-to-map r ]
			raw  [ r ]
		] 'err
	] [
		switch/default format [ 
			json-wrap [ rejoin [ "['err'," block-to-json-obj next r ",'validation']" ] ] 
			json [ "err" ] 
			map  [ 'err ]
			raw  [ 'err ]
			csv  [ "err!" ]
		] 'err
	]
]

dbdata-to-json: func [ dbdata /local R ] [
	data: dbdata/1  cols: dbdata/2
	either not empty? cols [
		; with-js-comment [ ?? data ?? cols ]
		R: copy "["
		frow: true
		while [ not tail? data ] [
			if not frow [ append R "," ]
			append R "{" 
			fcell: true
			foreach c cols [ 
				if not fcell [ append R "," ]
				append R rejoin [ "'" c "':" (to-js-values enquote js-escape first data) ] 
				data: next data
				fcell: false
			]
			append R "}"
			frow: false
		]
		append R "]"
		head R
	] [
		"[]"
	]
]

dbdata-to-map: func [ dbdata /local R Rs data cols ] [
	data: dbdata/1  cols: dbdata/2
	either not empty? cols [
		R: copy []
		while [ not tail? data ] [
			Rs: copy [] 
			foreach c cols [ 
				append Rs reduce [ to-word c  first data ] 
				data: next data
			]
			append/only R Rs
		]
		head R
	] [
		"[]"
	]
]

block-to-json-obj: func [ block /local R ] [
	R: copy "{"
	frow: true
	foreach [ name val ] block [
		if not frow [ append R "," ]
		append R rejoin [ "'" name "':" (enquote val) ] 
		frow: false
	]
	append R "}"
	R
]

pformat-int: func [ int ] [
	either integer? int [
		a: to-string int
		d: tail a loop to-integer ((length? a) - 1) / 3 [ d: back back back d  insert d "," ]
		head d
	] [
		int
	]
]

pformat-num: func [ num /local a d d2 ] [
	if error? try [ num: to-decimal num ] [ num: 0 ]
	a: to-string round num * 100
	either equal? to-integer a 0 [ "0.00" ] [ 
		d: tail a  d: back back d  insert d "."
		loop to-integer ((length? a) - 1 - 3) / 3 [ d: back back back d  insert d "," ]
		join either equal? first d2: head d #"." [ "0" ][ "" ] 
d2
	]
]

make-money-formater: func [ before after ] [
	func [ num ] [ rejoin [ before pformat-num num after ] ]
]

format-csv-value: func [ v /local wrap enquote wrap? is-value? ] [
	wrap: func [ v ] [ join3 {"} v {"} ]
	enquote: func [ v ] [ replace/all v {"} {""} v ]
	wrap?: func [ v ] [ all [ string? v any [ find v ";" find v newline find v {"} ] ] ]
	is-value?: func [ v ] [ any [ string? v number? v ] ]
	either is-value? v [
		either wrap? v [ wrap enquote v ] [ format-csv-num v ]
	] [ "" ] 
]

format-csv-num: func [ v ] [ replace/all to-string v "." "," ]

dbdata-to-csv: func [ dbdata /local R ] [
	data: dbdata/1  cols: dbdata/2
	insert data cols
	either not empty? cols [
		R: copy ""
		while [ not tail? data ] [
			fcell: true
			foreach c cols [ 
				append R rejoin [ (either fcell [""][";"]) format-csv-value first data ] 
				data: next data
				fcell: false
			]
			append R newline
		]
		head R
	] [	"" ]
]

set-js-data: func [ name data /json /script ] [
	print rejoin [ 
		(either script [ "<script type='text/javascript'>" ] [ "" ] ) 
		"DATA['" name "'] = " (either json [ serialize-response data 'json ] [ enquote data ] ) ";" 
		(either script [ "</script>" ] [ "" ]) newline 
	] 
]

with-js-comment: func [ code ] [ print "/*" do code print "*/" ]

enquote: func [ v /sql ] [ 
	either any [ integer? v none? v decimal? v logic? v ]
		[ either none? v [ "null" ] [ v ] ]
		[ rejoin [ "'" (either sql [ replace/all v "'" "''" ] [ v ]) "'" ] ]
]

sql-enquote: func [ v ] [ either any [ integer? v none? v ][ v ][ rejoin [ "'" (either string? v [ replace/all copy v "'" "''"] [ v ] ) "'" ]]]

js-escape: func [ v ] [ 
	if string? v [
		v: replace/all v #"^/" "\n"
		v: replace/all v #"^M" ""
		v: replace/all v "'" "\'"
	]
	v
]

to-js-values: func [ v ] [ 
	if none? v [
		v: "null"
	]
	v
]
